plugins {
  id 'java'
  id 'eclipse-wtp'
  id 'org.springframework.boot' version '2.7.5'
  id 'io.spring.dependency-management' version '1.1.0'
  id 'checkstyle'
  id 'jacoco'
  id 'org.owasp.dependencycheck' version '7.3.0'
  id 'org.sonarqube' version '3.3'
 }

sourceCompatibility = 1.11
targetCompatibility = 1.11

repositories {
  mavenLocal()
  mavenCentral()
}

group 'it.francescofiora'
version '1.0-SNAPSHOT'

def mysql_connector_version = property('mysql_connector.version')
def lombok_version = property('lombok.version')
def logback_version = property('logback.version')
def apache_httpclient_version = property('apache-httpclient.version')
def testcontainers_version = property('testcontainers.version')

dependencies {

  implementation 'org.springframework.boot:spring-boot-starter-web'
  implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
  implementation 'org.springframework.boot:spring-boot-starter-validation'
  implementation 'org.springframework.boot:spring-boot-starter-security'

  implementation "ch.qos.logback:logback-classic:${logback_version}"

  implementation "mysql:mysql-connector-java:${mysql_connector_version}"

  implementation "org.apache.httpcomponents:httpclient:${apache_httpclient_version}"

  implementation platform("org.testcontainers:testcontainers-bom:${testcontainers_version}")

  implementation "org.testcontainers:testcontainers"

  implementation "org.projectlombok:lombok:${lombok_version}"
  annotationProcessor "org.projectlombok:lombok:${lombok_version}"

  testImplementation 'org.springframework.boot:spring-boot-starter-test'
  testImplementation 'org.springframework.security:spring-security-test'
  testImplementation "org.projectlombok:lombok:${lombok_version}"

  testImplementation "org.testcontainers:junit-jupiter"
  testImplementation 'org.testcontainers:mysql'
  
  testAnnotationProcessor "org.projectlombok:lombok:${lombok_version}"
}

task cleanResources(type: Delete) {
  delete "build/resources"
}

defaultTasks "bootRun"

springBoot {
  mainClass.set("it.francescofiora.books.itt.Application")
  buildInfo()
}

sonarqube {
  properties {
    property "sonar.sourceEncoding", "UTF-8"
    property 'sonar.core.codeCoveragePlugin', 'jacoco'
    property 'sonar.coverage.jacoco.xmlReportPaths', "${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml"
  }
}

sourceSets {
  main {
    java {
      srcDirs 'java'
    }
    resources {
      srcDirs 'resources'
    }
  }
  test {
    java {
      srcDirs 'java'
    }
  }
}

eclipse {
  sourceSets {
     main {
         java {
             srcDirs += ["build/generated/sources/annotationProcessor/java/main"]
         }
     }
  }
}

checkstyle {
  toolVersion property('checkstyle.version')
  configFile  file("./../config/checkstyle/checkstyle.xml")
}
tasks.withType(Checkstyle) {
  reports {
    xml.enabled = false
    html.enabled = true
  }
}
checkstyleMain {
  source ='src/main/java'
}

test {
  useJUnitPlatform()
  finalizedBy jacocoTestReport
}

jacocoTestReport {
  dependsOn test
  reports {
    xml.enabled true
    csv.enabled false
    html.destination file("${buildDir}/reports/jacoco/test")
    xml.destination  file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
  }
}

wrapper {
    gradleVersion = "7.0"
}
