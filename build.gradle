plugins {
  id 'java'
  id 'org.springframework.boot' version '3.2.3'
  id 'io.spring.dependency-management' version '1.1.4'
  id 'checkstyle'
  id 'jacoco'
  id 'info.solidsoft.pitest' version '1.15.0'
  id 'org.owasp.dependencycheck' version '7.4.4'
  id 'org.sonarqube' version '4.4.1.3373'
  id 'com.google.cloud.tools.jib' version '3.3.1'
 }

sourceCompatibility = 1.17
targetCompatibility = 1.17

repositories {
  mavenLocal()
  mavenCentral()
}

group 'it.francescofiora'
version '1.0-SNAPSHOT'

def main_class = 'it.francescofiora.books.Application'

def liquibase_version = property('liquibase.version')
def springdoc_openapi_version = property('springdoc-openapi.version')
def mapstruct_version = property('mapstruct.version')
def lombok_version = property('lombok.version')
def mysql_connector_version = property('mysql_connector.version')
def logback_version = property('logback.version')
def openpojo_version = property('openpojo.version')

dependencies {

  implementation 'org.springframework.boot:spring-boot-starter-web'
  implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
  implementation 'org.springframework.boot:spring-boot-starter-validation'
  implementation 'org.springframework.boot:spring-boot-starter-security'

  implementation "org.liquibase:liquibase-core:${liquibase_version}"

  implementation "ch.qos.logback:logback-classic:${logback_version}"

  implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${springdoc_openapi_version}"

  implementation "org.projectlombok:lombok:${lombok_version}"
  implementation "org.mapstruct:mapstruct:${mapstruct_version}"

  implementation "mysql:mysql-connector-java:${mysql_connector_version}"

  annotationProcessor "org.projectlombok:lombok:${lombok_version}"
  annotationProcessor "org.mapstruct:mapstruct-processor:${mapstruct_version}"

  testImplementation 'org.springframework.boot:spring-boot-starter-test'
  testImplementation 'org.springframework.security:spring-security-test'
  testImplementation 'org.hsqldb:hsqldb'
  testImplementation "com.openpojo:openpojo:$openpojo_version"
  testImplementation "org.projectlombok:lombok:${lombok_version}"
  testAnnotationProcessor "org.projectlombok:lombok:${lombok_version}"
}

task cleanResources(type: Delete) {
  delete "build/resources"
}

defaultTasks "bootRun"

springBoot {
  mainClass.set("${main_class}")
  buildInfo()
}

jib {
	container {
		mainClass = "${main_class}"
	}
	from {
	  image = 'azul/zulu-openjdk-alpine:17'
	}
	to {
	  image = 'francescofiora-book'
	  tags = ['latest']
	}
	container {
	  creationTime = 'USE_CURRENT_TIMESTAMP'
	  workingDirectory = '/workspace'
	}
}

sonarqube {
  properties {
    property "sonar.sourceEncoding", "UTF-8"
    property 'sonar.core.codeCoveragePlugin', 'jacoco'
    property 'sonar.coverage.jacoco.xmlReportPaths', "${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml"
  }
}

sourceSets {
  main {
    java {
      srcDirs 'java'
    }
    resources {
      srcDirs 'resources'
    }
  }
  test {
    java {
      srcDirs 'java'
    }
  }
}

checkstyle {
  toolVersion property('checkstyle.version')
  configFile  file("config/checkstyle/checkstyle.xml")
}
tasks.withType(Checkstyle) {
  reports {
    xml.required = false
    html.required = true
  }
}
checkstyleMain {
  source ='src/main/java'
}

test {
  useJUnitPlatform()
  finalizedBy jacocoTestReport
}

jacocoTestReport {
  dependsOn test
  reports {
    xml.required = true
    csv.required = false
    html.required = true
    html.outputLocation = file("${buildDir}/reports/jacoco/test")
    xml.outputLocation = file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
  }
}

pitest {
  junit5PluginVersion = '1.2.1'
  pitestVersion = '1.15.2'
}

wrapper {
    gradleVersion = "7.5"
}
