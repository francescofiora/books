plugins {
  id 'java'
  id 'eclipse-wtp'
  id 'org.springframework.boot' version '2.4.2'
  id 'io.spring.dependency-management' version '1.0.11.RELEASE'
  id 'checkstyle'
  id 'jacoco'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
  mavenLocal()
  mavenCentral()
}

group 'it.francescofiora'
version '1.0-SNAPSHOT'

def commons_collections_version = property('commons-collections.version')
def commons_lang_version = property('commons-lang3.version')
def springdoc_openapi_version = property('springdoc-openapi.version')
def mapstruct_version = property('mapstruct.version')
def lombok_version = property('lombok.version')
def mysql_connector_version = property('mysql_connector.version')
def logback_version = property('logback.version')
def openpojo_version = property('openpojo.version')

dependencies {

  implementation 'org.springframework.boot:spring-boot-starter-web'
  implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
  implementation 'org.springframework.boot:spring-boot-starter-validation'
  implementation 'org.springframework.boot:spring-boot-starter-security'
  implementation 'org.springframework.boot:spring-boot-devtools'

  implementation "ch.qos.logback:logback-classic:${logback_version}"

  implementation "org.apache.commons:commons-lang3:${commons_lang_version}"
  implementation "org.apache.commons:commons-collections4:${commons_collections_version}"

  implementation "org.springdoc:springdoc-openapi-ui:${springdoc_openapi_version}"
  implementation "org.springdoc:springdoc-openapi-data-rest:${springdoc_openapi_version}"

  implementation "org.projectlombok:lombok:${lombok_version}"
  implementation "org.mapstruct:mapstruct:${mapstruct_version}"

  implementation "mysql:mysql-connector-java:${mysql_connector_version}"

  annotationProcessor "org.projectlombok:lombok:${lombok_version}"
  annotationProcessor "org.mapstruct:mapstruct-processor:${mapstruct_version}"
  
  testImplementation 'org.springframework.boot:spring-boot-starter-test'
  testImplementation 'org.springframework.security:spring-security-test'
  testImplementation 'org.hsqldb:hsqldb'
  testImplementation "com.openpojo:openpojo:$openpojo_version"
  testImplementation "org.projectlombok:lombok:${lombok_version}"
  testAnnotationProcessor "org.projectlombok:lombok:${lombok_version}"
}

tasks.withType(JavaCompile) {
    options.compilerArgs = [
       '-Amapstruct.defaultComponentModel=spring'
    ]
}

task cleanResources(type: Delete) {
    delete "build/resources"
}

defaultTasks "bootRun"

springBoot {
    mainClassName = "it.francescofiora.books.Application"
}


sourceSets {
  main {
    java {
      srcDirs 'java'
    }
    resources {
      srcDirs 'resources'
    }
  }
  test {
    java {
      srcDirs 'java'
    }
  }
}

eclipse {
  sourceSets {
     main {
         java {
             srcDirs += ["build/generated/sources/annotationProcessor/java/main"]
         }
     }
  }
  wtp {
    component {
      contextPath = 'books'
    }
  }
}

checkstyle {
  toolVersion property('checkstyle.version')
  configFile  file("config/checkstyle/checkstyle.xml")
}
tasks.withType(Checkstyle) {
  reports {
    xml.enabled = false
    html.enabled = true
  }
}
checkstyleMain {
  source ='src/main/java'
}

test {
  useJUnitPlatform()
  finalizedBy jacocoTestReport
}

jacocoTestReport {
  dependsOn test
}

wrapper {
    gradleVersion = "6.3"
}
